//You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

//You may assume the two numbers do not contain any leading zero, except the number 0 itself.

//Example:

//Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
//Output: 7 -> 0 -> 8
//Explanation: 342 + 465 = 807.

//来源：力扣（LeetCode）
//链接：https://leetcode-cn.com/problems/add-two-numbers
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

public static ListNode addTwoNumbers(ListNode l1, ListNode l2){
        ListNode dummyHead = new ListNode(0);
        ListNode returnedChain = dummyHead;
        int extract = 0;
        int total;
        while (l1!=null || l2!=null) {
            if (l1== null) {
                total = l2.val+extract;
                l2=l2.next;
            } else if (l2 == null) {
                total = l1.val+extract;
                l1=l1.next;
            } else {
                total = l1.val + l2.val+extract;
                l1=l1.next;
                l2=l2.next;
            }
            if (total>9) {
                returnedChain.next = new ListNode(total%10);
                extract = 1;
            } else {
                returnedChain.next = new ListNode(total);
                extract = 0;
            }
            returnedChain=returnedChain.next;
        }
        if (extract==1) {
            returnedChain.next = new ListNode(1);
        }
        return dummyHead.next;
    }
