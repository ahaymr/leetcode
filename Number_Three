//Given a string, find the length of the longest substring without repeating characters.

//Example 1:
//
//Input: "abcabcbb"
//Output: 3
//Explanation: The answer is "abc", with the length of 3.
//Example 2:
//
//Input: "bbbbb"
//Output: 1
//Explanation: The answer is "b", with the length of 1.
//Example 3:
//
//Input: "pwwkew"
//Output: 3
//Explanation: The answer is "wke", with the length of 3.
//Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
//
//来源：力扣（LeetCode）
//链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

public int lengthOfLongestSubstring(String s) {
        Map<Character, Integer> chat2Position = new HashMap<>(s.length()); //初始化大小，节省6ms,16->10
        int longestSubstringLength = 0;
        int startPoint = 0;
        char present; //提前申明变量，而不是在for里面每次都创建一个变量，节约10MB内存，46.6->36.4
        for (int i = 0; i < s.length(); i++) {
            present = s.charAt(i);
            if (chat2Position.containsKey(present)) {
                startPoint = Math.max(chat2Position.get(present), startPoint);
            }
            longestSubstringLength = Math.max(longestSubstringLength, i - startPoint + 1);
            chat2Position.put(present, i + 1);
        }
        return longestSubstringLength;
    }
